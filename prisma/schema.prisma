// The "schema.prisma" file is where you define all the settings for the database. So you can do things like 
// define models, your database connection password, and what the prisma code should be converted into.

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// In order to create a model aka table simply use the model keyword followed by a model name and curly braces. So like this
// model ModelName {}

// A model is made up of 4 things, but only 2 of them are required
// The required two are Column Name and Column Type
// The optional two are Field Type Modifier and Attributes
// Note: The 2 main Field Type Modifiers are: ? (making the column optional) and [](an array of that thing)
// Generally you'll see all 4 of these things work like this
// Column Name | Column Type | Field Type Modifier | Attribute/s (anything that starts with an @)

model User {
    id String @id @default(uuid())
    displayName String
    userName String @unique
    email String @unique
    password String
    profilePicture String
    location String
    bio String @db.Text
    interests String[]
    reputation Int @default(0)
    questions Question[]
    comments Comment[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ResearchEffortRating ResearchEffortRating[]
}

model Question {
    id String @id @default(uuid())
    title String 
    body String @db.Text
    tags String[]
    researchEffortRating Int @default(0)
    views Int @default(0)
    user User @relation(fields: [userId], references: [id])
    userId String
    answered Boolean @default(false)
    comments Comment[]
    ratings ResearchEffortRating[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    deletedAt DateTime?
}

model ResearchEffortRating {
    id String @id @default(uuid())
    rating Boolean // Represents positive or negative rating, if true Positive, if false Negative
    question Question @relation(fields: [questionId], references: [id])
    questionId String
    user User @relation(fields: [userId], references: [id])
    userId String
    @@unique([questionId, userId]) // Ensures that each user can only rate once per question
}

model Comment {
    id String @id @default(uuid())
    content String @db.Text
    question Question @relation(fields: [questionId], references: [id])
    questionId String
    user User @relation(fields: [userId], references: [id])
    userId String
    isAnswerToQuestion Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// To populate the referenced data simply pass in the property to the include. 
// include: {
//     property: true
// }

// To limit the amount of returned results for your query
// take: number

// To skip a certain amount of returned results for your query
// skip: number

// To order the results in a certain way
// orderBy: {
//     age: 'desc' | 'asc'
// }

// Note: Prisma does not support built in minimum or maximum attributes or middleware functions like 
// BeforeSave, AfterSave etc. So you have to do that by yourself in the controllers. Very unfortunate.